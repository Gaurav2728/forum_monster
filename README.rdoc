=Community

Issues, and feature requests can be submitted at:
https://atomos13.codebasehq.com/open-source-software/tickets

Community is a simple forum generator written in rails 3. The goal of Community, is to provide a simple, and easy to setup forum application without having to dictate how your site it setup. 

====A few things about what Community is, and is not:

* Community does not do any sort of authentication, or authorization. However, it does rely on the current_user method.
* Community while trying to assume as little as possible, currently assumes that the following columns are available from your user model: username, and created_at.
* Community does no authorization. By default all actions are available to all users. Even logged out users. ( Although, users who are not logged in cannot post, or create topics. )

====Installation

Add the following to your Gemfile
  gem 'community'

Generate the installation. <b><user model> should be the actual name of the model containing your user accounts.</b> This will copy all of the required controllers, models, views, and stylesheets to your application.
  rails g community:install <user model>

Add the following to your user model to setup the needed associations with user/topics/posts
  has_many :topics, :dependent => :destroy
  has_many :posts, :dependent => :destroy

Finally, migrate your database
  rake db:migrate
  
====Authentication

Community, as stated before, does not come with any authentication built in. The reason for this is so you can add a forum to your existing application without having to change the way your application works. Community knows about your user model from the moment you run the installation command.

====Authorization

Community, by default, allows all access to all users. Even those that are not currently logged in. This was by design, because of the vast number of authorization methods out there. If we tried to cover all of them it would just be a huge project. Not to mention that as soon as an API changes, Community would be broken. This also provides a large amount of flexibility. For example, if you wanted to use CanCan, you can! declarative_authorization? Yep. Aegis? Indeed! Since you have Community's controllers in your main application, you can customize them for your specific solution just like the rest of your application!

====Avatars

I did not include support for avatars into Community for the same reason that authentication, and authorization were not included. Flexibility! You can use whatever you like, associate it with your user model, and put the corresponding image tag in the topic show view.

====Markdown

Community has no forced support for markdown. Again, it's for ( can you say it with me? ) flexibility!

====Modifying the views, style, and adding your own images

Community will install the community.css stylesheet into your public/stylesheets directory. The views will be installed in your application app/views directory.